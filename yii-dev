#!/usr/bin/env php
<?php

use yiidev\commands\CommitCommand;
use yiidev\commands\InstallCommand;
use yiidev\commands\PullCommand;
use yiidev\commands\PushCommand;
use yiidev\commands\ReplicateCommand;
use yiidev\commands\StatusCommand;
use yiidev\commands\UpdateCommand;
use yiidev\components\console\Color;
use yiidev\components\console\Printer;

if (PHP_VERSION_ID < 70200) {
    echo 'PHP 7.2 or higher is required to work with this tool. Yii 3.0 requires PHP 7.2!' . PHP_EOL;
    exit(1);
}

if (!isset($argv)) {
    $argv = $_SERVER['argv'];
}

spl_autoload_register(function($className){
    if (substr($className, 0, 7) === 'yiidev\\') {
        /** @noinspection PhpIncludeInspection */
        include_once __DIR__ . str_replace(['yiidev\\', '\\'], DIRECTORY_SEPARATOR, $className) . '.php';
    }
});

function help(array $argv, Printer $printer)
{
    $printer->stderrln(<<<YII
  _   _  _  _ 
 | | | |(_)(_)
 | |_| || || |  Development Tool
  \__, ||_||_|
  |___/         for Yii 3.0

YII
    )
    ->stderrln('This tool helps with setting up a development environment for Yii 3 packages.')
    ->stderrln()
    ->stderrln('Usage: ' . ($argv[0] ?? 'yii-dev') . ' [OPTIONS] <command>')
    ->stderrln()

    ->stderrln('Options:')
    ->stderrln()

    ->stderr('  --http', Color::GREEN)
    ->stderrln('   Cloning git repositories with HTTPS URLs (default SSH)')
    ->stderrln()

    ->stderrln('Available Commands:')
    ->stderrln()

    ->stderr('  install', Color::YELLOW)
    ->stderr(' [--http]', Color::GREEN)
    ->stderrln('             Install all packages listed in packages.php')

    ->stderr('  install', Color::YELLOW)
    ->stderr(' [--http]', Color::GREEN)
    ->stderr(' <package>', Color::BLUE)
    ->stderrln('   Install a single package. <package> refers to the array key in packages.php')

    ->stderr('  update', Color::YELLOW)
    ->stderr('  [--http]', Color::GREEN)
    ->stderrln('             Update all packages listed in packages.php')

    ->stderr('  update', Color::YELLOW)
    ->stderr('  [--http]', Color::GREEN)
    ->stderr(' <package>', Color::BLUE)
    ->stderrln('   Update a single package. <package> refers to the array key in packages.php')

    ->stderr('  status', Color::YELLOW)
    ->stderrln('                       Show git status for all packages listed in packages.php')

    ->stderr('  status', Color::YELLOW)
    ->stderr(' <package>', Color::BLUE)
    ->stderrln('             Show git status for a single package. <package> refers to the array key in packages.php')

    ->stderr('  replicate', Color::YELLOW)
    ->stderrln('                    Copy files specified in replicate.php into each package listed in packages.php')

    ->stderr('  replicate', Color::YELLOW)
    ->stderr(' <package>', Color::BLUE)
    ->stderrln('          Copy files specified in replicate.php into a single package. <package> refers to the array key in packages.php')

    ->stderr('  commit', Color::YELLOW)
    ->stderr(' <message>', Color::BLUE)
    ->stderrln('             Add and commit changes into each package repository listed in packages.php')

    ->stderr('  commit', Color::YELLOW)
    ->stderr(' <message>', Color::BLUE)
    ->stderr(' <package>', Color::BLUE)
    ->stderrln('   Add and commit changes into a single package repository. <package> refers to the array key in packages.php')

    ->stderr('  push', Color::YELLOW)
    ->stderrln('                         Push changes into each package repository listed in packages.php')

    ->stderr('  push', Color::YELLOW)
    ->stderr(' <package>', Color::BLUE)
    ->stderrln('               Push changes into a single package repository. <package> refers to the array key in packages.php')

    ->stderr('  pull', Color::YELLOW)
    ->stderrln('                         Pull changes for each package repository listed in packages.php')

    ->stderr('  pull', Color::YELLOW)
    ->stderr(' <package>', Color::BLUE)
    ->stderrln('               Pull changes for a single package repository. <package> refers to the array key in packages.php')

    ->stderr('  lint', Color::YELLOW)
    ->stderrln('                         Check packages for common mistakes')
    ->stderrln();
}

$printer = new Printer();
$commandName = $argv[1] ?? 'help';

switch ($commandName) {
    case 'install':
        $command = new InstallCommand($printer, in_array('--http', $argv, true), $argv[3] ?? $argv[2] ?? null);
        $command->run();

        break;
    case 'update':
        $command = new UpdateCommand($printer, in_array('--http', $argv, true), $argv[3] ?? $argv[2] ?? null);
        $command->run();

        break;
    case 'status':
        $command = new StatusCommand($printer, $argv[2] ?? null);
        $command->run();

        break;
    case 'replicate':
        $command = new ReplicateCommand($printer, $argv[2] ?? null);
        $command->run();

        break;
    case 'commit':
        $command = new CommitCommand($printer, $argv[2] ?? null, $argv[3] ?? null);
        $command->run();

        break;
    case 'push':
        $command = new PushCommand($printer, $argv[2] ?? null);
        $command->run();

        break;
    case 'pull':
        $command = new PullCommand($printer, $argv[2] ?? null);
        $command->run();

        break;
    case 'lint':
        // TODO implement
        $printer->stderrln('Not implemented yet!', Color::RED);

        break;
    default:
        help($argv, $printer);
        exit(1);
}
