#!/usr/bin/env php
<?php

use yiidev\commands\CommitCommand;
use yiidev\commands\InstallCommand;
use yiidev\commands\LintCommand;
use yiidev\commands\PullCommand;
use yiidev\commands\PushCommand;
use yiidev\commands\ReplicateCommand;
use yiidev\commands\StatusCommand;
use yiidev\components\console\Args;
use yiidev\components\console\Color;
use yiidev\components\console\Printer;

if (PHP_VERSION_ID < 70200) {
    echo 'PHP 7.2 or higher is required to work with this tool. Yii 3.0 requires PHP 7.2!' . PHP_EOL;
    exit(1);
}

spl_autoload_register(function($className){
    if (substr($className, 0, 7) === 'yiidev\\') {
        /** @noinspection PhpIncludeInspection */
        include_once __DIR__ . str_replace(['yiidev\\', '\\'], DIRECTORY_SEPARATOR, $className) . '.php';
    }
});

function help(Args $args, Printer $printer)
{
    /** @noinspection HtmlDeprecatedTag */
    $printer->stderrln(<<<YII
  _   _  _  _
 | | | |(_)(_)
 | |_| || || |  Development Tool
  \__, ||_||_|
  |___/         for Yii 3.0

YII
    )
    ->stderrln('This tool helps with setting up a development environment for Yii 3 packages.')
    ->stderrln()

    ->stderrln('Usage: ')

    ->stderr("  {$args->getScript()}", Color::GREEN)
    ->stderr(' [<command>]', Color::YELLOW)
    ->stderrln(' [<argument>]...', Color::CYAN)

    ->stderrln()

    ->stderrln('Common arguments:')

    ->stderr('  packages', Color::CYAN)
    ->stderrln('  Package names separated by commas. For example:')
    ->stderrln()
    ->stderr('               ./yii-dev', Color::GREEN)
    ->stderr(' install', Color::YELLOW)
    ->stderrln(' rbac,di,yii-demo,db-mysql', Color::CYAN)
    ->stderrln()
    ->stderrln('            Array keys from package.php configuration can be specified.')
    ->stderrln('            If it is not specified, then command will be applied to all packages.')

    ->stderrln()

    ->stderrln('Available commands:')

    ->stderr('  install', Color::YELLOW)
    ->stderr(' [<packages>]', Color::CYAN)
    ->stderrln('           Install packages.')

    ->stderr('  update', Color::YELLOW)
    ->stderr(' [<packages>]', Color::CYAN)
    ->stderrln('            Update packages.')

    ->stderr('  status', Color::YELLOW)
    ->stderr(' [<packages>]', Color::CYAN)
    ->stderrln('            Show git status of packages.')

    ->stderr('  replicate', Color::YELLOW)
    ->stderr(' [<packages>]', Color::CYAN)
    ->stderrln('         Copy files specified in replicate.php into each package.')

    ->stderr('  commit', Color::YELLOW)
    ->stderr(' <message>', Color::CYAN)
    ->stderr(' [<packages>]', Color::CYAN)
    ->stderrln('  Add and commit changes into each package repository.')

    ->stderr('  push', Color::YELLOW)
    ->stderr(' [<packages>]', Color::CYAN)
    ->stderrln('              Push changes into package repositories.')

    ->stderr('  pull', Color::YELLOW)
    ->stderr(' [<packages>]', Color::CYAN)
    ->stderrln('              Pull changes from package repositories.')

    ->stderr('  lint', Color::YELLOW)
    ->stderr(' [<packages>]', Color::CYAN)
    ->stderrln('              Check packages according to PSR12 standard.')

    ->stderrln();
}

$printer = new Printer();
$args = new Args();

$commandName = $args->getCommand() ?? 'help';

switch ($commandName) {
    case 'install':
        $command = new InstallCommand($printer, false, $args->getCommandArg(1));
        $command->run();

        break;
    case 'update':
        $command = new InstallCommand($printer, true, $args->getCommandArg(1));
        $command->run();

        break;
    case 'status':
        $command = new StatusCommand($printer, $args->getCommandArg(1));
        $command->run();

        break;
    case 'replicate':
        $command = new ReplicateCommand($printer, $args->getCommandArg(1));
        $command->run();

        break;
    case 'commit':
        $command = new CommitCommand($printer, $args->getCommandArg(1), $args->getCommandArg(2));
        $command->run();

        break;
    case 'push':
        $command = new PushCommand($printer, $args->getCommandArg(1));
        $command->run();

        break;
    case 'pull':
        $command = new PullCommand($printer, $args->getCommandArg(1));
        $command->run();

        break;
    case 'lint':
        $command = new LintCommand($printer, $args->getCommandArg(1));
        $command->run();

        break;
    default:
        help($args, $printer);
        exit(1);
}
